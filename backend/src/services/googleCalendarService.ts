import { google } from 'googleapis';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';

// Load environment variables
import dotenv from 'dotenv';
dotenv.config();

const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID;
const CREDENTIALS_PATH = process.env.GOOGLE_APPLICATION_CREDENTIALS;

if (!CALENDAR_ID || !CREDENTIALS_PATH) {
  throw new Error("Missing Google Calendar ID or Credentials Path in .env file");
}

// Configure Google Auth
const auth = new google.auth.GoogleAuth({
  // Fix: Replaced `path.resolve(process.cwd(), CREDENTIALS_PATH)` with `path.resolve(CREDENTIALS_PATH)`.
  // `path.resolve` will use the current working directory by default if an absolute path is not formed,
  // this change avoids the TypeScript error `Property 'cwd' does not exist on type 'Process'`.
  keyFile: path.resolve(CREDENTIALS_PATH),
  scopes: ['https://www.googleapis.com/auth/calendar'],
});

const calendar = google.calendar({ version: 'v3', auth });

/**
 * Creates a new event on the Google Calendar with a Google Meet link.
 * @param user1 The name of the first user.
 * @param user2 The name of the second user.
 * @returns The Google Meet link for the created event.
 */
export async function createEventWithMeet(user1: string, user2: string): Promise<string> {
  // Set event time for 2 minutes from now, lasting 30 minutes
  const eventStartTime = new Date();
  eventStartTime.setMinutes(eventStartTime.getMinutes() + 2);
  const eventEndTime = new Date(eventStartTime.getTime() + 30 * 60 * 1000);

  const event = {
    summary: `MeetStream Chat: ${user1} and ${user2}`,
    description: 'A quick chat session generated by MeetStream.',
    start: {
      dateTime: eventStartTime.toISOString(),
      timeZone: 'UTC',
    },
    end: {
      dateTime: eventEndTime.toISOString(),
      timeZone: 'UTC',
    },
    conferenceData: {
      createRequest: {
        requestId: uuidv4(),
        conferenceSolutionKey: {
          type: 'hangoutsMeet',
        },
      },
    },
    // You could add attendees here if you had their email addresses
    // attendees: [{ email: 'user1@example.com' }, { email: 'user2@example.com' }],
  };

  try {
    const res = await calendar.events.insert({
      calendarId: CALENDAR_ID,
      requestBody: event,
      conferenceDataVersion: 1,
    });

    const meetLink = res.data.hangoutLink;
    if (!meetLink) {
      throw new Error('Failed to create Google Meet link.');
    }

    console.log('Successfully created event with Meet link:', meetLink);
    return meetLink;
  } catch (error) {
    console.error('Error creating Google Calendar event:', error);
    throw new Error('Could not create a Google Meet session.');
  }
}
