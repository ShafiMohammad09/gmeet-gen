import { google } from 'googleapis';
import { v4 as uuidv4 } from 'uuid';

// Environment variables are expected to be loaded by the main server entry point (server.ts)

const CALENDAR_ID = process.env.GOOGLE_CALENDAR_ID;
const CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL;
const PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY;
const PROJECT_ID = process.env.GOOGLE_PROJECT_ID;

if (!CALENDAR_ID || !CLIENT_EMAIL || !PRIVATE_KEY || !PROJECT_ID) {
  throw new Error(
    'Missing Google Calendar credentials in .env file. Please provide GOOGLE_CALENDAR_ID, GOOGLE_CLIENT_EMAIL, GOOGLE_PRIVATE_KEY, and GOOGLE_PROJECT_ID.'
  );
}

// Configure Google Auth with credentials from environment variables
const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: CLIENT_EMAIL,
    // The private key from .env should be a single line string with literal '\n' for newlines.
    // We replace the literal '\\n' with actual newline characters for the API.
    private_key: PRIVATE_KEY.replace(/\\n/g, '\n'),
    project_id: PROJECT_ID,
  },
  scopes: ['https://www.googleapis.com/auth/calendar'],
});

const calendar = google.calendar({ version: 'v3', auth });

/**
 * Creates a new event on the Google Calendar with a Google Meet link.
 * @param user1 The name of the first user.
 * @param user2 The name of the second user.
 * @returns The Google Meet link for the created event.
 */
export async function createEventWithMeet(user1: string, user2: string): Promise<string> {
  // Set event time for 2 minutes from now, lasting 30 minutes
  const eventStartTime = new Date();
  eventStartTime.setMinutes(eventStartTime.getMinutes() + 2);
  const eventEndTime = new Date(eventStartTime.getTime() + 30 * 60 * 1000);

  const event = {
    summary: `MeetStream Chat: ${user1} and ${user2}`,
    description: 'A quick chat session generated by MeetStream.',
    start: {
      dateTime: eventStartTime.toISOString(),
      timeZone: 'UTC',
    },
    end: {
      dateTime: eventEndTime.toISOString(),
      timeZone: 'UTC',
    },
    conferenceData: {
      createRequest: {
        requestId: uuidv4(),
        conferenceSolutionKey: {
          type: 'hangoutsMeet',
        },
      },
    },
    // You could add attendees here if you had their email addresses
    // attendees: [{ email: 'user1@example.com' }, { email: 'user2@example.com' }],
  };

  try {
    const res = await calendar.events.insert({
      calendarId: CALENDAR_ID,
      requestBody: event,
      conferenceDataVersion: 1,
    });

    const meetLink = res.data.hangoutLink;
    if (!meetLink) {
      throw new Error('Failed to create Google Meet link.');
    }

    console.log('Successfully created event with Meet link:', meetLink);
    return meetLink;
  } catch (error) {
    console.error('Error creating Google Calendar event:', error);
    throw new Error('Could not create a Google Meet session.');
  }
}
